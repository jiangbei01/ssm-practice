/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2017-07-01 05:45:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>员工列表</title>\r\n");

	pageContext.setAttribute("path",request.getContextPath());

      out.write("\r\n");
      out.write("<!-- 推荐以 / 开始的相对路径（以服务器的根路径为相对路径） ,这里的");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("是前带 / 后不带 / 的路径-->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/static/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write(" <!-- 先引入jQuery，再引入js -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/static/bootstrap/js/jquery.min.js\"> </script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/static/bootstrap/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 员工修改模态框 -->\r\n");
      out.write("\t<div class=\"modal fade\" id=\"editEmpModal\" tabindex=\"-1\" role=\"dialog\">\r\n");
      out.write("\t  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("\t    <div class=\"modal-content\">\r\n");
      out.write("\t      <div class=\"modal-header\">\r\n");
      out.write("\t        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span>&times;</span></button>\r\n");
      out.write("\t        <h4 class=\"modal-title\">员工修改</h4>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t      <div class=\"modal-body\">\r\n");
      out.write("\t        <form class=\"form-horizontal\">\r\n");
      out.write("\t\t\t  <!-- 显示员工姓名的静态组件 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label for=\"input_empName\" class=\"col-sm-2 control-label\">empName</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t     <p class=\"form-control-static\" id=\"empName_static\"></p>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t  <!-- 输入员工邮箱 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label for=\"input_email\" class=\"col-sm-2 control-label\">email</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t      <input type=\"text\" name=\"email\" class=\"form-control\" id=\"input_update_email\" placeholder=\"email\">\r\n");
      out.write("\t\t\t      <span class=\"help-block\"></span>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t  <!-- 选择员工性别 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label class=\"col-sm-2 control-label\">gender</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t      <label class=\"radio-inline\">\r\n");
      out.write("\t\t\t\t\t  <input type=\"radio\" name=\"gender\" id=\"gender1_update_input\" value=\"M\"> 男\r\n");
      out.write("\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t\t<label class=\"radio-inline\">\r\n");
      out.write("\t\t\t\t\t  <input type=\"radio\" name=\"gender\" id=\"gender2_update_input\" value=\"F\"> 女\r\n");
      out.write("\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t <!-- 部门名称 -->\r\n");
      out.write("\t\t\t <div class=\"form-group\">\r\n");
      out.write("\t\t\t  \t<label class=\"col-sm-2 control-label\">deptName</label>\r\n");
      out.write("\t\t\t　　　<div class=\"col-sm-4\" style=\"width:120px\">\t\r\n");
      out.write("\t\t\t\t\t<!-- 部门名称是变动的，这里保存员工是只保存ID的形式 -->\r\n");
      out.write("\t\t\t\t\t<select class=\"form-control\" name=\"dId\">\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t  \t</div>\r\n");
      out.write("\t\t\t　</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t      <!-- 页脚按钮操作 -->\r\n");
      out.write("\t      <div class=\"modal-footer\">\r\n");
      out.write("\t        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">关闭</button>\r\n");
      out.write("\t        <button type=\"button\" class=\"btn btn-primary\" id=\"emp_updateBtn\">更新</button>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 员工新增模态框 -->\r\n");
      out.write("\t<div class=\"modal fade\" id=\"addEmpModal\" tabindex=\"-1\" role=\"dialog\">\r\n");
      out.write("\t  <div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("\t    <div class=\"modal-content\">\r\n");
      out.write("\t      <div class=\"modal-header\">\r\n");
      out.write("\t        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span>&times;</span></button>\r\n");
      out.write("\t        <h4 class=\"modal-title\" id=\"myModalLabel\">添加员工</h4>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t      <div class=\"modal-body\">\r\n");
      out.write("\t        <form class=\"form-horizontal\">\r\n");
      out.write("\t\t\t  <!-- 输入员工姓名 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label for=\"input_empName\" class=\"col-sm-2 control-label\">empName</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t      <input type=\"text\" name=\"empName\" class=\"form-control\" id=\"input_empName\" placeholder=\"empName\">\r\n");
      out.write("\t\t\t      <span class=\"help-block\"></span>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t  <!-- 输入员工邮箱 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label for=\"input_email\" class=\"col-sm-2 control-label\">email</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t      <input type=\"text\" name=\"email\" class=\"form-control\" id=\"input_email\" placeholder=\"email\">\r\n");
      out.write("\t\t\t      <span class=\"help-block\"></span>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t  <!-- 选择员工性别 -->\r\n");
      out.write("\t\t\t  <div class=\"form-group\">\r\n");
      out.write("\t\t\t    <label class=\"col-sm-2 control-label\">gender</label>\r\n");
      out.write("\t\t\t    <div class=\"col-sm-10\">\r\n");
      out.write("\t\t\t      <label class=\"radio-inline\">\r\n");
      out.write("\t\t\t\t\t  <input type=\"radio\" name=\"gender\" id=\"gender1_add_input\" value=\"M\" checked=\"checked\"> 男\r\n");
      out.write("\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t\t<label class=\"radio-inline\">\r\n");
      out.write("\t\t\t\t\t  <input type=\"radio\" name=\"gender\" id=\"gender2_add_input\" value=\"F\"> 女\r\n");
      out.write("\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("\t\t\t <!-- 部门名称 -->\r\n");
      out.write("\t\t\t <div class=\"form-group\">\r\n");
      out.write("\t\t\t  \t<label class=\"col-sm-2 control-label\">deptName</label>\r\n");
      out.write("\t\t\t　　　<div class=\"col-sm-4\" style=\"width:120px\">\t\r\n");
      out.write("\t\t\t\t\t<!-- 部门名称是变动的，这里保存员工是只保存ID的形式 -->\r\n");
      out.write("\t\t\t\t\t<select class=\"form-control\" name=\"dId\">\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t  \t</div>\r\n");
      out.write("\t\t\t　</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t      <!-- 页脚按钮操作 -->\r\n");
      out.write("\t      <div class=\"modal-footer\">\r\n");
      out.write("\t        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">关闭</button>\r\n");
      out.write("\t        <button type=\"button\" class=\"btn btn-primary\" id=\"emp_saveBtn\">保存</button>\r\n");
      out.write("\t      </div>\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<!-- 分为四大行 -->\r\n");
      out.write("\t\t<!-- 标题 -->\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t <div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t<font size=\"20\">SSM-CRUD</font>\r\n");
      out.write("\t\t\t </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 按钮 -->\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<!-- 偏移4列 -->\r\n");
      out.write("\t\t\t<div class=\"col-md-4 col-md-offset-8\">\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" id=\"addBtn\">新增</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-danger\" id=\"delAllBtn\">删除</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 表格 -->\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t<table class=\"table table-hover\" id=\"emps_table\">\r\n");
      out.write("\t\t\t\t\t<thead>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<!-- 新增批量删除的checkbox -->\r\n");
      out.write("\t\t\t\t\t\t\t<th>\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"check_all\"/>\r\n");
      out.write("\t\t\t\t\t\t\t</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>#</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>empName</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>empEmail</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>gender</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>deptName</th>\r\n");
      out.write("\t\t\t\t\t\t\t<th>操作</th>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</thead>\r\n");
      out.write("\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- 分页信息 -->\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<!-- 分页文字信息，其中分页信息都封装在pageInfo中 -->\r\n");
      out.write("\t\t\t<div class=\"col-md-6\" id=\"page_info\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- 分页条 -->\r\n");
      out.write("\t\t\t<div class=\"col-md-6\" id=\"page_nav\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t//全局总记录数，用于查最后一页\r\n");
      out.write("\t\tvar golbalTotalCount,golbalCurrentPage;\r\n");
      out.write("\t\t//页面加载完成后直接发送ajax请求，取得分页数据\r\n");
      out.write("\t\t$(function(){\r\n");
      out.write("\t\t\t//加载完页面就通过这个函数发ajax请求\r\n");
      out.write("\t\t\ttoPage(1);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//跳转到某页的函数\r\n");
      out.write("\t\tfunction toPage(pn){\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//请求方式\r\n");
      out.write("\t\t\t\ttype : \"GET\", \r\n");
      out.write("\t\t\t\t//请求url\r\n");
      out.write("\t\t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/emps\",\r\n");
      out.write("\t\t\t\t//请求要带的数据\r\n");
      out.write("\t\t\t\tdata :\"pn=\"+pn,\r\n");
      out.write("\t\t\t\t//请求成功的回调函数\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t//1.解析JSON返回员工数据\r\n");
      out.write("\t\t\t\t\tbuild_emps_table(result);\r\n");
      out.write("\t\t\t\t\t//2.解析生成分页信息(分页条与分页导航)\r\n");
      out.write("\t\t\t\t\tbuild_pages_info(result);\r\n");
      out.write("\t\t\t\t\tbuild_pages_nav(result);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//解析员工数据\r\n");
      out.write("\t\tfunction build_emps_table(result){\r\n");
      out.write("\t\t\t//清空表格数据\r\n");
      out.write("\t\t\t$(\"#emps_table tbody\").empty();\r\n");
      out.write("\t\t\t//员工数据\r\n");
      out.write("\t\t\tvar emps = result.map.pageInfo.list;\r\n");
      out.write("\t\t\t//使用jQuery遍历数组，遍历的是取出来的json数组，可以通过开发工具查看JSON结构\r\n");
      out.write("\t\t\t$.each(emps,function(idx,item){\r\n");
      out.write("\t\t\t\t//增加删除的多选框\r\n");
      out.write("\t\t\t\tvar checkboxTd = $(\"<td><input type='checkbox' class='check_item'/></td>\");\r\n");
      out.write("\t\t\t\t//使用jQuery生成各列\r\n");
      out.write("\t\t\t\tvar empIdTd = $(\"<td></td>\").append(item.empId);\r\n");
      out.write("\t\t\t\tvar empNameTd = $(\"<td></td>\").append(item.empName);\r\n");
      out.write("\t\t\t\t//三目运算符处理性别\r\n");
      out.write("\t\t\t\tvar genderTd = $(\"<td></td>\").append(item.gender==\"M\"?\"男\":\"女\");\r\n");
      out.write("\t\t\t\tvar emailTd = $(\"<td></td>\").append(item.email);\r\n");
      out.write("\t\t\t\tvar deptNameTd = $(\"<td></td>\").append(item.department.deptName);\r\n");
      out.write("\t\t\t\t//添加操作按钮，通过jQuery的一些操作（例如CSS的追加CSS操作），完成按钮的构建\r\n");
      out.write("\t\t\t\tvar editBtn = $(\"<button></button>\").addClass(\"btn btn-info btn-sm edit_btn\")\r\n");
      out.write("\t\t\t\t\t\t\t\t.append($(\"<span></span>\").addClass(\"glyphicon glyphicon-pencil\"))\r\n");
      out.write("\t\t\t\t\t\t\t\t.append(\"编辑\");\r\n");
      out.write("\t\t\t\t//为编辑按钮添加自定义属性，保存员工的ID\r\n");
      out.write("\t\t\t\teditBtn.attr(\"editId\",item.empId);\r\n");
      out.write("\t\t\t\tvar delBtn = $(\"<button></button>\").addClass(\"btn btn-danger btn-sm del_btn\")\r\n");
      out.write("\t\t\t\t.append($(\"<span></span>\").addClass(\"glyphicon glyphicon-trash\"))\r\n");
      out.write("\t\t\t\t.append(\"删除\");\r\n");
      out.write("\t\t\t\t//为删除按钮添加自定义属性，保存要删除的员工ID\r\n");
      out.write("\t\t\t\tdelBtn.attr(\"delId\",item.empId);\r\n");
      out.write("\t\t\t\tvar btnTd = $(\"<td></td>\").append(editBtn).append(\" \").append(delBtn);\r\n");
      out.write("\t\t\t\t//链式操作完成列的添加（链式操作由于jQuery返回的是原元素）\r\n");
      out.write("\t\t\t\t$(\"<tr></tr>\").append(checkboxTd)\r\n");
      out.write("\t\t\t\t\t.append(empIdTd)\r\n");
      out.write("\t\t\t\t\t.append(empNameTd)\r\n");
      out.write("\t\t\t\t\t.append(emailTd)\r\n");
      out.write("\t\t\t\t\t.append(genderTd)\r\n");
      out.write("\t\t\t\t\t.append(deptNameTd)\r\n");
      out.write("\t\t\t\t\t.append(btnTd)\r\n");
      out.write("\t\t\t\t\t.appendTo($(\"#emps_table tbody\"));\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//生成分页信息\r\n");
      out.write("\t\tfunction build_pages_info(result){\r\n");
      out.write("\t\t\t//清空分页数据\r\n");
      out.write("\t\t\t$(\"#page_info\").empty();\r\n");
      out.write("\t\t\t//当前页\r\n");
      out.write("\t\t\tvar currentPage = result.map.pageInfo.pageNum;\r\n");
      out.write("\t\t\t//总页数\r\n");
      out.write("\t\t\tvar totalPage = result.map.pageInfo.pages;\r\n");
      out.write("\t\t\t//总记录数\r\n");
      out.write("\t\t\tvar totalCount = result.map.pageInfo.total;\r\n");
      out.write("\t\t\t//给全局记录数赋值\r\n");
      out.write("\t\t\tgolbalTotalCount = result.map.pageInfo.total;\r\n");
      out.write("\t\t\t//给当前页赋值，完成当前页信息的保存\r\n");
      out.write("\t\t\tgolbalCurrentPage = currentPage;\r\n");
      out.write("\t\t\t$(\"#page_info\").append(\"当前第：<strong>\"+currentPage+\" </strong> 页，\"+\"总共：<strong>\"+totalPage+\"</strong> 页，\"+\"总共：<strong>\"+totalCount+\" </strong> 条记录\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//生成分页导航信息\r\n");
      out.write("\t\tfunction build_pages_nav(result){\r\n");
      out.write("\t\t\t//清空分页导航信息\r\n");
      out.write("\t\t\t$(\"#page_nav\").empty();\r\n");
      out.write("\t\t\t//导航条外层的Ul\r\n");
      out.write("\t\t\tvar navUl = $(\"<ul></ul>\").addClass(\"pagination\");\r\n");
      out.write("\t\t\t//首页\r\n");
      out.write("\t\t\tvar firstPageLi = $(\"<li></li>\").append($(\"<a></a>\").append(\"首页\").attr(\"href\",\"#\"));\r\n");
      out.write("\t\t\t//前一页\r\n");
      out.write("\t\t\tvar prePageLi = $(\"<li></li>\").append($(\"<a></a>\").append(\"&laquo;\"));\r\n");
      out.write("\t\t\t//判断是否有首页\r\n");
      out.write("\t\t\tif(result.map.pageInfo.hasPreviousPage == false){\r\n");
      out.write("\t\t\t\tfirstPageLi.addClass(\"disabled\");\r\n");
      out.write("\t\t\t\tprePageLi.addClass(\"disabled\");\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t//添加首页和前一页翻页的单机事件\r\n");
      out.write("\t\t\t\tfirstPageLi.click(function(){\r\n");
      out.write("\t\t\t\t\ttoPage(1);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tprePageLi.click(function(){\r\n");
      out.write("\t\t\t\t\ttoPage(result.map.pageInfo.pageNum-1);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//后一页\r\n");
      out.write("\t\t\tvar nextPageLi = $(\"<li></li>\").append($(\"<a></a>\").append(\"&raquo;\"));\r\n");
      out.write("\t\t\t//末页\r\n");
      out.write("\t\t\tvar lastPageLi = $(\"<li></li>\").append($(\"<a></a>\").append(\"末页\").attr(\"href\",\"#\"));\r\n");
      out.write("\t\t\t//判断是否有末页\r\n");
      out.write("\t\t\tif(result.map.pageInfo.hasNextPage == false){\r\n");
      out.write("\t\t\t\tlastPageLi.addClass(\"disabled\");\r\n");
      out.write("\t\t\t\tnextPageLi.addClass(\"disabled\");\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t//添加末页和后一页翻页的单机事件\r\n");
      out.write("\t\t\t\tlastPageLi.click(function(){\r\n");
      out.write("\t\t\t\t\ttoPage(result.map.pageInfo.pages);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tnextPageLi.click(function(){\r\n");
      out.write("\t\t\t\t\ttoPage(result.map.pageInfo.pageNum+1);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//添加到ul\r\n");
      out.write("\t\t\tnavUl.append(firstPageLi).append(prePageLi);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//遍历页码数\r\n");
      out.write("\t\t\t$.each(result.map.pageInfo.navigatepageNums,function(idx,item){\r\n");
      out.write("\t\t\t\tvar numLi = $(\"<li></li>\").append($(\"<a></a>\").append(item));\r\n");
      out.write("\t\t\t\t//如果当前页为正在遍历的页，则高亮显示，采用增加类的方法完成\r\n");
      out.write("\t\t\t\tif(result.map.pageInfo.pageNum == item){\r\n");
      out.write("\t\t\t\t\tnumLi.addClass(\"active\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//给每个页码添加单击绑定事件\r\n");
      out.write("\t\t\t\tnumLi.click(function(){\r\n");
      out.write("\t\t\t\t\ttoPage(item);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tnavUl.append(numLi);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t//li加入ul，ul加入nav\r\n");
      out.write("\t\t\tnavUl.append(nextPageLi).append(lastPageLi);\r\n");
      out.write("\t\t\tvar navEle = $(\"<nav></nav>\").append(navUl);\r\n");
      out.write("\t\t\t$(\"#page_nav\").append(navEle);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//清空表单样式及内容\r\n");
      out.write("\t\tfunction reset_form(ele){\r\n");
      out.write("\t\t\t$(ele)[0].reset();\r\n");
      out.write("\t\t\t//清空表单样式\r\n");
      out.write("\t\t\t$(ele).find(\"*\").removeClass(\"has-error has-success\");\r\n");
      out.write("\t\t\t$(ele).find(\".help-block\").text(\"\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//增加员工的事件，弹出员工模态框\r\n");
      out.write("\t\t$(\"#addBtn\").click(function(){\r\n");
      out.write("\t\t\t//重置表单：\r\n");
      out.write("\t\t\treset_form(\"#addEmpModal form\");\r\n");
      out.write("\t\t\t//发送ajax请求查询部门信息\r\n");
      out.write("\t\t\tgetDepts(\"#addEmpModal select\");\r\n");
      out.write("\t\t\t//弹出模态框\r\n");
      out.write("\t\t\t$('#addEmpModal').modal({\r\n");
      out.write("\t\t\t\tbackdrop:false\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//得到部门信息的函数\r\n");
      out.write("\t\tfunction getDepts(ele){\r\n");
      out.write("\t\t\t//先清空原来下拉框的值：\r\n");
      out.write("\t\t\t$(ele).empty();\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//请求方式\r\n");
      out.write("\t\t\t\ttype : \"GET\", \r\n");
      out.write("\t\t\t\t//请求url\r\n");
      out.write("\t\t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/depts\",\r\n");
      out.write("\t\t\t\t//请求要带的数据，这里无需带数据\r\n");
      out.write("\t\t\t\t//请求成功的回调函数\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t$.each(result.map.deptList,function(){\r\n");
      out.write("\t\t\t\t\t\t//这里换用不传参的方式，采用this引用正在遍历的对象\r\n");
      out.write("\t\t\t\t\t\tvar optionEle = $(\"<option></option>\").append(this.deptName).attr(\"value\",this.deptId);\r\n");
      out.write("\t\t\t\t\t\toptionEle.appendTo(ele);\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//添加表单数据的前段校验\r\n");
      out.write("\t\tfunction validate_add_form(){\r\n");
      out.write("\t\t\t//1.获取需要校验的值\r\n");
      out.write("\t\t\t//2.使用jQuery正则(api中常用正则)进行校验（校验插件的使用待更新）\r\n");
      out.write("\t\t\tvar empNameVal = $(\"#input_empName\").val();\r\n");
      out.write("\t\t\t//校验的正则表达式（可以搜索常用正则）\r\n");
      out.write("\t\t\tvar regName = /(^[a-zA-Z0-9_-]{6,16}$)|(^[\\u2E80-\\u9FFF]{2,5}$)/;\r\n");
      out.write("\t\t\t//开始校验用户名\r\n");
      out.write("\t\t\tif(!regName.test(empNameVal)){\r\n");
      out.write("\t\t\t\t//alert(\"用户名只能是6-16位英文数字或2-5位汉字组合！\");\r\n");
      out.write("\t\t\t\t//将提示信息优化，使用bootstrap的样式，给父元素添加相应的类即可\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_empName\",\"error\",\"用户名只能是6-16位英文数字或2-5位汉字组合！\");\r\n");
      out.write("\t\t\t\t//$(\"#input_empName\").parent().addClass(\"has-error\");\r\n");
      out.write("\t\t\t\t//$(\"#input_empName\").next(\".help-block\").text(\"用户名只能是6-16位英文数字或2-5位汉字组合！\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_empName\",\"success\",\"用户名正确！\");\r\n");
      out.write("\t\t\t\t//$(\"#input_empName\").parent().addClass(\"has-success\");\r\n");
      out.write("\t\t\t\t//$(\"#input_empName\").next(\".help-block\").text(\"用户名正确！\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t//同理，校验邮箱\r\n");
      out.write("\t\t\tvar empEmailVal = $(\"#input_email\").val();\r\n");
      out.write("\t\t\tvar regEmail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\r\n");
      out.write("\t\t\t//开始校验邮箱\r\n");
      out.write("\t\t\tif(!regEmail.test(empEmailVal)){\r\n");
      out.write("\t\t\t\t//alert(\"邮箱不合法！\");\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_email\",\"error\",\"邮箱不合法！\");\r\n");
      out.write("\t\t\t\t//$(\"#input_email\").parent().addClass(\"has-error\");\r\n");
      out.write("\t\t\t\t//$(\"#input_email\").next(\".help-block\").text(\"邮箱不合法！\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_email\",\"success\",\"邮箱格式正确！\");\r\n");
      out.write("\t\t\t\t//$(\"#input_email\").parent().addClass(\"has-success\");\r\n");
      out.write("\t\t\t\t//$(\"#input_email\").next(\".help-block\").text(\"邮箱格式正确！\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//重新抽取校验函数完成之前重复样式的清除工作\r\n");
      out.write("\t\tfunction vilidate_form(ele,status,msg){\r\n");
      out.write("\t\t\t\t//清除当前校验状态\r\n");
      out.write("\t\t\t\t$(ele).parent().removeClass(\"has-success has-error\");\r\n");
      out.write("\t\t\t\t$(ele).next(\".help-block\").text(\"\");\r\n");
      out.write("\t\t\tif(\"success\" == status){\r\n");
      out.write("\t\t\t\t$(ele).parent().addClass(\"has-success\");\r\n");
      out.write("\t\t\t\t$(ele).next(\".help-block\").text(msg);\r\n");
      out.write("\t\t\t}else if(\"error\" == status){\r\n");
      out.write("\t\t\t\t$(ele).parent().addClass(\"has-error\");\r\n");
      out.write("\t\t\t\t$(ele).next(\".help-block\").text(msg);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//为添加员工姓名输入框添加change事件，完成用户名重复的后端校验\r\n");
      out.write("\t\t$(\"#input_empName\").change(function(){\r\n");
      out.write("\t\t\t//发送ajax请求，查询用户名是否重复\r\n");
      out.write("\t\t\tvar empName = this.value;\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//请求方式\r\n");
      out.write("\t\t\t\ttype : \"POST\", \r\n");
      out.write("\t\t\t\t//请求url\r\n");
      out.write("\t\t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/vadEmpName\",\r\n");
      out.write("\t\t\t\t//请求要带的数据\r\n");
      out.write("\t\t\t\tdata:\"empName=\"+empName,\r\n");
      out.write("\t\t\t\t//请求成功的回调函数\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\tif(result.code == 100){//成功，用户名可用\r\n");
      out.write("\t\t\t\t\t\tvilidate_form(\"#input_empName\",\"success\",\"用户名可用！\");\r\n");
      out.write("\t\t\t\t\t\t$(\"#emp_saveBtn\").attr(\"ajax-vad\",\"success\");\r\n");
      out.write("\t\t\t\t\t}else{//失败，用户名不可用\r\n");
      out.write("\t\t\t\t\t\tvilidate_form(\"#input_empName\",\"error\",result.map.vadFailMeg);\r\n");
      out.write("\t\t\t\t\t\t$(\"#emp_saveBtn\").attr(\"ajax-vad\",\"error\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//为添加员工的保存按钮绑定单击事件\r\n");
      out.write("\t\t$(\"#emp_saveBtn\").click(function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//1.5发送ajax请求之前进行用户名是否可用的校验：\r\n");
      out.write("\t\t\tif($(this).attr(\"ajax-vad\")==\"error\"){\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t//1.进行表单数据的校验\r\n");
      out.write("\t\t\t if(!validate_add_form()){\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t} \r\n");
      out.write("\t\t\t//2.模态框中保存按钮发送ajax请求\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//请求方式\r\n");
      out.write("\t\t\t\ttype : \"POST\", \r\n");
      out.write("\t\t\t\t//请求url\r\n");
      out.write("\t\t\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/emp\",\r\n");
      out.write("\t\t\t\t//请求要带的数据，这里是模态框中的值，\r\n");
      out.write("\t\t\t\t//这里应该采用的是jQuery的序列化表单的方法进行提取表单数据，serialize();\r\n");
      out.write("\t\t\t\t//表单序列化的数据：$(\"#addEmpModal form\").serialize();\r\n");
      out.write("\t\t\t\tdata:$(\"#addEmpModal form\").serialize(),\r\n");
      out.write("\t\t\t\t//请求成功的回调函数\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t//alert(result.msg);\r\n");
      out.write("\t\t\t\t\t//添加一个后端校验：\r\n");
      out.write("\t\t\t\t\tif(result.code == 100){//校验成功\r\n");
      out.write("\t\t\t\t\t\t//1.成功完成模态框则关闭\r\n");
      out.write("\t\t\t\t\t\t$(\"#addEmpModal\").modal('hide')\r\n");
      out.write("\t\t\t\t\t\t//2.来到列表最后一页\r\n");
      out.write("\t\t\t\t\t\t//发送ajax请求，显示最后一页，因为插件做了参数合理化配置，可以配置一个比较大的数字\r\n");
      out.write("\t\t\t\t\t\t//这样，查到的总是最后一页记录，我们使用全局的总记录数\r\n");
      out.write("\t\t\t\t\t\ttoPage(golbalTotalCount);\r\n");
      out.write("\t\t\t\t\t}else{//校验失败\r\n");
      out.write("\t\t\t\t\t\t//console.log(result);\r\n");
      out.write("\t\t\t\t\t\tvar emailErrorMsg = result.map.fieldErrors.email;\r\n");
      out.write("\t\t\t\t\t\tvar empNameErrorMsg = result.map.fieldErrors.empName;\r\n");
      out.write("\t\t\t\t\t\t//有哪个字段的信息就显示哪个\r\n");
      out.write("\t\t\t\t\t\tif(undefined != emailErrorMsg){\r\n");
      out.write("\t\t\t\t\t\t\t//显示邮箱错误信息（之前已经抽象为 方法）\r\n");
      out.write("\t\t\t\t\t\t\tvilidate_form(\"#input_email\",\"error\",emailErrorMsg);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tif(undefined != empNameErrorMsg){\r\n");
      out.write("\t\t\t\t\t\t\t//显示名称错误信息\r\n");
      out.write("\t\t\t\t\t\t\tvilidate_form(\"#input_empName\",\"error\",empNameErrorMsg);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//根据id得到员工信息的函数\r\n");
      out.write("\t\tfunction getEmp(id){\r\n");
      out.write("\t\t\t//发送ajax请求查询员工信息\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//REST风格的url，直接使用/传参\r\n");
      out.write("\t\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/getEmp/\"+id,\r\n");
      out.write("\t\t\t\ttype:\"GET\",\r\n");
      out.write("\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\tconsole.log(result);\r\n");
      out.write("\t\t\t\t\tvar empData = result.map.emp;\r\n");
      out.write("\t\t\t\t\t//在页面的指定位置显示相关的值\r\n");
      out.write("\t\t\t\t\t$(\"#empName_static\").text(empData.empName);\r\n");
      out.write("\t\t\t\t\t$(\"#input_update_email\").val(empData.email);\r\n");
      out.write("\t\t\t\t\t//合理使用选择器，选择修改模态框的gender\r\n");
      out.write("\t\t\t\t\t//将单选框的选中项改为val为指定值的选项\r\n");
      out.write("\t\t\t\t\t$(\"#editEmpModal input[name=gender]\").val([empData.gender]);\r\n");
      out.write("\t\t\t\t\t//$(\"#editEmpModal input[name='genger'][value='\"+empData.gender+\"']\").prop(\"checked\",true);\r\n");
      out.write("\t\t\t\t\t//$(\"#gender2_update_input\").val([empData.gender]);\r\n");
      out.write("\t\t\t\t\t//下拉框同理\r\n");
      out.write("\t\t\t\t\t$(\"#editEmpModal select\").val([empData.dId]);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t/*直接给页面的新增按钮绑定单击事件时不行的，因为按钮是通过发送ajax请求加载数据时\r\n");
      out.write("\t\t\t加载的，而我们的click()是页面加载完时绑定的事件，也就是说按钮事件先于按钮出生的时间\r\n");
      out.write("\t\t\t于是，便出现了问题\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t//这里详细的on的用法暂时不展开\r\n");
      out.write("\t\t$(document).on(\"click\",\".edit_btn\",function(){\r\n");
      out.write("\t\t\t//alert(\"绑定编辑事件成功！\");\r\n");
      out.write("\t\t\t//1.查出部门信息，员工信息等\r\n");
      out.write("\t\t\t\t//这里重新抽取一下得到部门的方法，使其可以得到指定的部门信息，添加到指定的元素\r\n");
      out.write("\t\t\t//发送ajax请求查询部门信息\r\n");
      out.write("\t\t\tgetDepts(\"#editEmpModal select\");\r\n");
      out.write("\t\t\t//通过为编辑按钮添加自定义属性保存ID值，可以方便的完成ID值的保存与获取\r\n");
      out.write("\t\t\tgetEmp($(this).attr(\"editId\"));\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//弹出模态框之前传递ID值给更新按钮\r\n");
      out.write("\t\t\t$(\"#emp_updateBtn\").attr(\"updateId\",$(this).attr(\"editId\"));\r\n");
      out.write("\t\t\t//2.弹出修改模态框\r\n");
      out.write("\t\t\t$('#editEmpModal').modal({\r\n");
      out.write("\t\t\t\tbackdrop:false\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//为更新按钮绑定单击事件，进行更新\r\n");
      out.write("\t\t$(\"#emp_updateBtn\").click(function(){\r\n");
      out.write("\t\t\t//由于有邮箱输入，更新之前需要进行邮箱的格式验证\r\n");
      out.write("\t\t\t//直接抽取前面的代码进行校验邮箱\r\n");
      out.write("\t\t\tvar empEmailVal = $(\"#input_update_email\").val();\r\n");
      out.write("\t\t\tvar regEmail = /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/;\r\n");
      out.write("\t\t\t//开始校验邮箱\r\n");
      out.write("\t\t\tif(!regEmail.test(empEmailVal)){\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_update_email\",\"error\",\"邮箱不合法！\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tvilidate_form(\"#input_update_email\",\"success\",\"邮箱格式正确！\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t//取得要更新的ID\r\n");
      out.write("\t\t\tvar udpId = $(this).attr(\"updateId\");\r\n");
      out.write("\t\t\t//邮箱验证通过，发送ajax的PUT请求，完成员工更新\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t//要根据ID更新，需要取得ID的值，通过同样的自定义属性的方法，将ID传到按钮上\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/updateEmp/\"+udpId,\r\n");
      out.write("\t\t\t\ttype:\"PUT\",\r\n");
      out.write("\t\t\t\t//数据时序列化表单的数据\r\n");
      out.write("\t\t\t\tdata:$(\"#editEmpModal form\").serialize(),\r\n");
      out.write("\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\t//alert(\"处理成功！\");\r\n");
      out.write("\t\t\t\t\t//1.关闭模态框框\r\n");
      out.write("\t\t\t\t\t$(\"#editEmpModal\").modal('hide');\r\n");
      out.write("\t\t\t\t\t//2.回到本页面，本页面如何获取呢，我们通过构建分页条时的pageInfo得到本页页码\r\n");
      out.write("\t\t\t\t\t\t//再像之前保存总记录数一样，保存本页数据到全局变量即可！\r\n");
      out.write("\t\t\t\t\ttoPage(golbalCurrentPage);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//同理，为后来动态生成的删除按钮绑定单击事件，依旧使用on方法\r\n");
      out.write("\t\t$(document).on(\"click\",\".del_btn\",function(){\r\n");
      out.write("\t\t\t//1.弹出确认删除对话框（需要获取员工姓名进行确认）\r\n");
      out.write("\t\t\t\t//这里下标从0开始，加了元素后td为第三个td\r\n");
      out.write("\t\t\tvar empName = $(this).parents(\"tr\").find(\"td:eq(2)\").text();\r\n");
      out.write("\t\t\tvar delID = $(this).attr(\"delId\");\r\n");
      out.write("\t\t\tif(confirm(\"确认删除：\"+empName+\" 吗？\")){\r\n");
      out.write("\t\t\t\t//确认胡发送ajax请求进行删除\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/deleteEmp/\"+delID,\r\n");
      out.write("\t\t\t\t\ttype:\"DELETE\",\r\n");
      out.write("\t\t\t\t\t//无数据传送\r\n");
      out.write("\t\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\t\t//alert(result.msg);\r\n");
      out.write("\t\t\t\t\t\t//2.回到本页面，本页面如何获取呢，我们通过构建分页条时的pageInfo得到本页页码\r\n");
      out.write("\t\t\t\t\t\t//再像之前保存总记录数一样，保存本页数据到全局变量即可！\r\n");
      out.write("\t\t\t\t\ttoPage(golbalCurrentPage);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//全选框的单击事件：\r\n");
      out.write("\t\t$(\"#check_all\").click(function(){\r\n");
      out.write("\t\t\t//直接使用attr()时是undefined，因为我们定义的时候没有定义，我们使用prop()\r\n");
      out.write("\t\t\t//$(this).prop(\"checked\");\r\n");
      out.write("\t\t\t//下面的单个的框的值就是全选的状态的值\r\n");
      out.write("\t\t\t$(\".check_item\").prop(\"checked\",$(this).prop(\"checked\"));\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//为后来动态生成的check_item绑定单击事件，完成未选满时全选框不选中\r\n");
      out.write("\t\t$(document).on(\"click\",\".check_item\",function(){\r\n");
      out.write("\t\t\t//若当前选中的元素为5个全选，则全选按钮选中\r\n");
      out.write("\t\t\t\t//当然，这里不能写死，如果将来变为6个7个还需改动\r\n");
      out.write("\t\t\tvar flag = $(\".check_item:checked\").length == $(\".check_item\").length;\r\n");
      out.write("\t\t\t\t$(\"#check_all\").prop(\"checked\",flag);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//为批量删除按钮绑定单击事件\r\n");
      out.write("\t\t$(\"#delAllBtn\").click(function(){\r\n");
      out.write("\t\t\t//$(\".check_item:checked\")\r\n");
      out.write("\t\t\t//遍历每一个被选中的多选框\r\n");
      out.write("\t\t\t\t//将员工姓名拼串\r\n");
      out.write("\t\t\t\tvar empNames = \"\";\r\n");
      out.write("\t\t\t\tvar empIds=\"\";\r\n");
      out.write("\t\t\t$.each($(\".check_item:checked\"),function(){\r\n");
      out.write("\t\t\t\t//寻找要删除的员工姓名\r\n");
      out.write("\t\t\t\tvar empName = $(this).parents(\"tr\").find(\"td:eq(2)\").text();\r\n");
      out.write("\t\t\t\tempNames += empName+\",\";\r\n");
      out.write("\t\t\t\t//组装员工ID字符串，和组装姓名类似，只不过id所在列不一样\r\n");
      out.write("\t\t\t\tvar empId = $(this).parents(\"tr\").find(\"td:eq(1)\").text();\r\n");
      out.write("\t\t\t\tempIds += empId+\"-\";\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t//去除多余的逗号\r\n");
      out.write("\t\t\tempNames = empNames.substring(0,empNames.length-1);\r\n");
      out.write("\t\t\t//去掉多余的 -\r\n");
      out.write("\t\t\tempIds = empIds.substring(0,empIds.length-1);\r\n");
      out.write("\t\t\tif(confirm(\"确认删除：\"+empNames+\" 吗?\")){\r\n");
      out.write("\t\t\t\t//确认删除，发ajax请求\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/deleteEmp/\"+empIds,\r\n");
      out.write("\t\t\t\t\ttype:\"DELETE\",\r\n");
      out.write("\t\t\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t\t\talert(result.msg);\r\n");
      out.write("\t\t\t\t\t\t//依旧回到本页面\r\n");
      out.write("\t\t\t\t\t\ttoPage(golbalCurrentPage);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
